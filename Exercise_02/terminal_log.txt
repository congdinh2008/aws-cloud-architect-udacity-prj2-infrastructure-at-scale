congdinh@CONGs-MacBook-Pro task_06 % terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/archive...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/archive v2.4.0...
- Installed hashicorp/archive v2.4.0 (signed by HashiCorp)
- Installing hashicorp/aws v5.16.1...
- Installed hashicorp/aws v5.16.1 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
congdinh@CONGs-MacBook-Pro task_06 % terraform validate
Success! The configuration is valid.

congdinh@CONGs-MacBook-Pro task_06 % terraform plan -out "solution.plan"
data.archive_file.greet_lambda: Reading...
data.archive_file.greet_lambda: Read complete after 0s [id=63c04810bfd17f548feb98fa5b5efb4aa00726f3]
data.aws_availability_zones.available: Reading...
data.aws_iam_policy_document.lambda_logging: Reading...
data.aws_caller_identity.current: Reading...
data.aws_iam_policy_document.assume_role: Reading...
data.aws_iam_policy_document.lambda_logging: Read complete after 0s [id=16712114]
data.aws_iam_policy_document.assume_role: Read complete after 0s [id=2690255455]
data.aws_caller_identity.current: Read complete after 1s [id=708817396393]
data.aws_availability_zones.available: Read complete after 3s [id=us-east-1]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_cloudwatch_log_group.example will be created
  + resource "aws_cloudwatch_log_group" "example" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + name              = "/aws/lambda/Greeting"
      + name_prefix       = (known after apply)
      + retention_in_days = 14
      + skip_destroy      = false
      + tags_all          = (known after apply)
    }

  # aws_iam_policy.lambda_logging will be created
  + resource "aws_iam_policy" "lambda_logging" {
      + arn         = (known after apply)
      + description = "IAM policy for logging from a lambda"
      + id          = (known after apply)
      + name        = "lambda_logging"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "logs:PutLogEvents",
                          + "logs:CreateLogStream",
                          + "logs:CreateLogGroup",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:logs:*:*:*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id   = (known after apply)
      + tags_all    = (known after apply)
    }

  # aws_iam_role.iam_for_lambda will be created
  + resource "aws_iam_role" "iam_for_lambda" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "iam_for_lambda"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # aws_iam_role_policy_attachment.lambda_logs will be created
  + resource "aws_iam_role_policy_attachment" "lambda_logs" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "iam_for_lambda"
    }

  # aws_lambda_function.greet_lambda will be created
  + resource "aws_lambda_function" "greet_lambda" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + filename                       = "./lambda.py.zip"
      + function_name                  = "Greeting"
      + handler                        = "greet_lambda.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = false
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.9"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = (known after apply)
      + source_code_size               = (known after apply)
      + tags_all                       = (known after apply)
      + timeout                        = 3
      + version                        = (known after apply)

      + environment {
          + variables = {
              + "greeting" = "Greeting"
            }
        }
    }

Plan: 5 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + lambda_function_arn = (known after apply)

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: solution.plan

To perform exactly these actions, run the following command to apply:
    terraform apply "solution.plan"
congdinh@CONGs-MacBook-Pro task_06 % terraform apply "solution.plan"
aws_cloudwatch_log_group.example: Creating...
aws_iam_policy.lambda_logging: Creating...
aws_iam_role.iam_for_lambda: Creating...
aws_iam_policy.lambda_logging: Creation complete after 3s [id=arn:aws:iam::708817396393:policy/lambda_logging]
aws_cloudwatch_log_group.example: Creation complete after 3s [id=/aws/lambda/Greeting]
aws_iam_role.iam_for_lambda: Creation complete after 5s [id=iam_for_lambda]
aws_iam_role_policy_attachment.lambda_logs: Creating...
aws_iam_role_policy_attachment.lambda_logs: Creation complete after 0s [id=iam_for_lambda-20230910062804938200000001]
aws_lambda_function.greet_lambda: Creating...
aws_lambda_function.greet_lambda: Still creating... [10s elapsed]
aws_lambda_function.greet_lambda: Creation complete after 14s [id=Greeting]

Apply complete! Resources: 5 added, 0 changed, 0 destroyed.

Outputs:

lambda_function_arn = "arn:aws:lambda:us-east-1:708817396393:function:Greeting"
congdinh@CONGs-MacBook-Pro task_06 % terraform plan -out "solution.plan"
data.archive_file.greet_lambda: Reading...
data.archive_file.greet_lambda: Read complete after 0s [id=63c04810bfd17f548feb98fa5b5efb4aa00726f3]
data.aws_caller_identity.current: Reading...
data.aws_availability_zones.available: Reading...
data.aws_iam_policy_document.lambda_logging: Reading...
data.aws_iam_policy_document.assume_role: Reading...
aws_cloudwatch_log_group.example: Refreshing state... [id=/aws/lambda/Greeting]
data.aws_iam_policy_document.lambda_logging: Read complete after 0s [id=16712114]
data.aws_iam_policy_document.assume_role: Read complete after 0s [id=2690255455]
aws_iam_policy.lambda_logging: Refreshing state... [id=arn:aws:iam::708817396393:policy/lambda_logging]
aws_iam_role.iam_for_lambda: Refreshing state... [id=iam_for_lambda]
data.aws_caller_identity.current: Read complete after 1s [id=708817396393]
aws_iam_role_policy_attachment.lambda_logs: Refreshing state... [id=iam_for_lambda-20230910062804938200000001]
data.aws_availability_zones.available: Read complete after 2s [id=us-east-1]
aws_lambda_function.greet_lambda: Refreshing state... [id=Greeting]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  ~ update in-place

Terraform will perform the following actions:

  # aws_lambda_function.greet_lambda will be updated in-place
  ~ resource "aws_lambda_function" "greet_lambda" {
      ~ handler                        = "greet_lambda.lambda_handler" -> "lambda.lambda_handler"
        id                             = "Greeting"
        tags                           = {}
        # (21 unchanged attributes hidden)

        # (3 unchanged blocks hidden)
    }

Plan: 0 to add, 1 to change, 0 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Saved the plan to: solution.plan

To perform exactly these actions, run the following command to apply:
    terraform apply "solution.plan"
congdinh@CONGs-MacBook-Pro task_06 % terraform apply "solution.plan"    
aws_lambda_function.greet_lambda: Modifying... [id=Greeting]
aws_lambda_function.greet_lambda: Modifications complete after 8s [id=Greeting]

Apply complete! Resources: 0 added, 1 changed, 0 destroyed.

Outputs:

lambda_function_arn = "arn:aws:lambda:us-east-1:708817396393:function:Greeting"
congdinh@CONGs-MacBook-Pro task_06 % terraform destroy
data.archive_file.greet_lambda: Reading...
data.archive_file.greet_lambda: Read complete after 0s [id=63c04810bfd17f548feb98fa5b5efb4aa00726f3]
data.aws_caller_identity.current: Reading...
data.aws_availability_zones.available: Reading...
data.aws_iam_policy_document.lambda_logging: Reading...
data.aws_iam_policy_document.assume_role: Reading...
aws_cloudwatch_log_group.example: Refreshing state... [id=/aws/lambda/Greeting]
data.aws_iam_policy_document.lambda_logging: Read complete after 0s [id=16712114]
data.aws_iam_policy_document.assume_role: Read complete after 0s [id=2690255455]
aws_iam_policy.lambda_logging: Refreshing state... [id=arn:aws:iam::708817396393:policy/lambda_logging]
aws_iam_role.iam_for_lambda: Refreshing state... [id=iam_for_lambda]
data.aws_caller_identity.current: Read complete after 2s [id=708817396393]
data.aws_availability_zones.available: Read complete after 2s [id=us-east-1]
aws_iam_role_policy_attachment.lambda_logs: Refreshing state... [id=iam_for_lambda-20230910062804938200000001]
aws_lambda_function.greet_lambda: Refreshing state... [id=Greeting]

Terraform used the selected providers to generate the following execution plan. Resource actions are
indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # aws_cloudwatch_log_group.example will be destroyed
  - resource "aws_cloudwatch_log_group" "example" {
      - arn               = "arn:aws:logs:us-east-1:708817396393:log-group:/aws/lambda/Greeting" -> null
      - id                = "/aws/lambda/Greeting" -> null
      - name              = "/aws/lambda/Greeting" -> null
      - retention_in_days = 14 -> null
      - skip_destroy      = false -> null
      - tags              = {} -> null
      - tags_all          = {} -> null
    }

  # aws_iam_policy.lambda_logging will be destroyed
  - resource "aws_iam_policy" "lambda_logging" {
      - arn         = "arn:aws:iam::708817396393:policy/lambda_logging" -> null
      - description = "IAM policy for logging from a lambda" -> null
      - id          = "arn:aws:iam::708817396393:policy/lambda_logging" -> null
      - name        = "lambda_logging" -> null
      - path        = "/" -> null
      - policy      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "logs:PutLogEvents",
                          - "logs:CreateLogStream",
                          - "logs:CreateLogGroup",
                        ]
                      - Effect   = "Allow"
                      - Resource = "arn:aws:logs:*:*:*"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - policy_id   = "ANPA2KCGPEKU6BROKQBQU" -> null
      - tags        = {} -> null
      - tags_all    = {} -> null
    }

  # aws_iam_role.iam_for_lambda will be destroyed
  - resource "aws_iam_role" "iam_for_lambda" {
      - arn                   = "arn:aws:iam::708817396393:role/iam_for_lambda" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2023-09-10T06:28:02Z" -> null
      - force_detach_policies = false -> null
      - id                    = "iam_for_lambda" -> null
      - managed_policy_arns   = [
          - "arn:aws:iam::708817396393:policy/lambda_logging",
        ] -> null
      - max_session_duration  = 3600 -> null
      - name                  = "iam_for_lambda" -> null
      - path                  = "/" -> null
      - tags                  = {} -> null
      - tags_all              = {} -> null
      - unique_id             = "AROA2KCGPEKU3Z4WRHBV6" -> null
    }

  # aws_iam_role_policy_attachment.lambda_logs will be destroyed
  - resource "aws_iam_role_policy_attachment" "lambda_logs" {
      - id         = "iam_for_lambda-20230910062804938200000001" -> null
      - policy_arn = "arn:aws:iam::708817396393:policy/lambda_logging" -> null
      - role       = "iam_for_lambda" -> null
    }

  # aws_lambda_function.greet_lambda will be destroyed
  - resource "aws_lambda_function" "greet_lambda" {
      - architectures                  = [
          - "x86_64",
        ] -> null
      - arn                            = "arn:aws:lambda:us-east-1:708817396393:function:Greeting" -> null
      - filename                       = "./lambda.py.zip" -> null
      - function_name                  = "Greeting" -> null
      - handler                        = "lambda.lambda_handler" -> null
      - id                             = "Greeting" -> null
      - invoke_arn                     = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:708817396393:function:Greeting/invocations" -> null
      - last_modified                  = "2023-09-10T06:33:09.000+0000" -> null
      - layers                         = [] -> null
      - memory_size                    = 128 -> null
      - package_type                   = "Zip" -> null
      - publish                        = false -> null
      - qualified_arn                  = "arn:aws:lambda:us-east-1:708817396393:function:Greeting:$LATEST" -> null
      - qualified_invoke_arn           = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:708817396393:function:Greeting:$LATEST/invocations" -> null
      - reserved_concurrent_executions = -1 -> null
      - role                           = "arn:aws:iam::708817396393:role/iam_for_lambda" -> null
      - runtime                        = "python3.9" -> null
      - skip_destroy                   = false -> null
      - source_code_hash               = "Y/gHFWVNYA+8p3MkpzLjKjWahLZAmGCtUx/rUqOqVLw=" -> null
      - source_code_size               = 236 -> null
      - tags                           = {} -> null
      - tags_all                       = {} -> null
      - timeout                        = 3 -> null
      - version                        = "$LATEST" -> null

      - environment {
          - variables = {
              - "greeting" = "Greeting"
            } -> null
        }

      - ephemeral_storage {
          - size = 512 -> null
        }

      - tracing_config {
          - mode = "PassThrough" -> null
        }
    }

Plan: 0 to add, 0 to change, 5 to destroy.

Changes to Outputs:
  - lambda_function_arn = "arn:aws:lambda:us-east-1:708817396393:function:Greeting" -> null

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_lambda_function.greet_lambda: Destroying... [id=Greeting]
aws_lambda_function.greet_lambda: Destruction complete after 1s
aws_iam_role_policy_attachment.lambda_logs: Destroying... [id=iam_for_lambda-20230910062804938200000001]
aws_cloudwatch_log_group.example: Destroying... [id=/aws/lambda/Greeting]
aws_cloudwatch_log_group.example: Destruction complete after 1s
aws_iam_role_policy_attachment.lambda_logs: Destruction complete after 1s
aws_iam_policy.lambda_logging: Destroying... [id=arn:aws:iam::708817396393:policy/lambda_logging]
aws_iam_role.iam_for_lambda: Destroying... [id=iam_for_lambda]
aws_iam_policy.lambda_logging: Destruction complete after 1s
aws_iam_role.iam_for_lambda: Destruction complete after 2s

Destroy complete! Resources: 5 destroyed.
congdinh@CONGs-MacBook-Pro task_06 % 